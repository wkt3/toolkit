generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
  MANAGER
  GUEST
  INCHARGE
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  newPassword           String?
  online         Boolean   @default(false)
  loginLogs           LoginLog[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  favouriteIds          String[]               @db.ObjectId

  accounts Account[]
  sessions Session[]
  admin    Admin?
}

model LoginLog {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime               @default(now())
  os          String?
  status      String?   // e.g., "success", "failed"
  browserName String?
  timestamp   DateTime? @default(now())
  timezone    String?
  browserMajorVersion String?
  browserVersion String?
  userAgent  String?
  userAgentDetails String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId
  action      String?   // e.g., "login", "logout", "failed"
  ipAddress   String
  location    String?
  browser     String?
  device      String?
  loggedInAt  DateTime @default(now())
}

model Admin {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId @unique
  canViewUsers   Boolean @default(false)
  canManageUsers  Boolean @default(false)
  canViewLogs     Boolean @default(false)
  canSendPromos   Boolean @default(false)
  createdAt       DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
  identifier String?

  @@unique([email, token])
  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
