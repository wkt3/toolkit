generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
  MANAGER
  GUEST
  INCHARGE
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  newPassword           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  favouriteIds          String[]               @db.ObjectId

  accounts Account[]
<<<<<<< HEAD
  sessions Session[]
=======
  sessions      Session[]
  messages Message[] @relation("UserMessages")
  receivedMessages Message[] @relation("MessageRecipient")
  online Boolean @default(false)
  lastSeen DateTime @default(now())
  chatRoomMembers ChatRoomMember[]
  groups UserGroup[]
>>>>>>> 96018a2da1a7bb5cd46b0d3db81483116810d15a
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

<<<<<<< HEAD
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  token      String   @unique
  expires    DateTime
=======


model Message{
  id String @id @default(auto()) @map("_id") @db.ObjectId
   content   String
  createdAt DateTime @default(now())
  senderId  String   @db.ObjectId
   sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  roomId    String   @db.ObjectId
  room      ChatRoom @relation("RoomMessages", fields: [roomId], references: [id])
  fileUrl    String?
  group      Group?   @relation(fields: [groupId], references: [id])
  groupId    String?  @db.ObjectId
  recipient  User?    @relation("MessageRecipient", fields: [recipientId], references: [id])
  recipientId String?  @db.ObjectId 
  type       MessageType
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name    String
  users   UserGroup[]
  messages Message[]
  adminId String
}


model ChatRoom {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  isGroup   Boolean    @default(false)
  chatRoomMembers ChatRoomMember[]
  messages  Message[] @relation("RoomMessages")
  createdAt DateTime @default(now())
}



model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime
>>>>>>> 96018a2da1a7bb5cd46b0d3db81483116810d15a
  identifier String?

  @@unique([email, token])
  @@unique([identifier, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

<<<<<<< HEAD
=======

type Address{
  city String
  country String
  line1 String
  line2 String?
  postal_code String
  state String
}

>>>>>>> 96018a2da1a7bb5cd46b0d3db81483116810d15a
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
<<<<<<< HEAD
=======

model ChatRoomMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  chatRoomId String  @db.ObjectId

  user      User     @relation(fields: [userId], references: [id])
  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@unique([userId, chatRoomId])
}

model UserGroup {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  groupId String @db.ObjectId

  user    User   @relation(fields: [userId], references: [id])
  group   Group  @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

>>>>>>> 96018a2da1a7bb5cd46b0d3db81483116810d15a
