
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole{
  ADMIN
  USER
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  password String?
  newPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role  UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  favouriteIds String[] @db.ObjectId

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
  orders Order[]
  sessions      Session[]
  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds],references: [id])
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen",fields: [seenMessageIds],references: [id])
  messages Message[]
}


model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@unique([provider,providerAccountId])
}

model Conversation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds],references: [id])
}

model Message{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())
  seenIds String[] @db.ObjectId

  seen User[] @relation("Seen",fields: [seenIds],references: [id])
  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete:Cascade)

  senderId String @db.ObjectId
  sender User@relation(fields: [senderId],references: [id],onDelete:Cascade)
}

model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime
  identifier String?

  @@unique([email,token])
  @@unique([identifier, token])
}

model PasswordResetToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime

  @@unique([email,token])
}

model TwoFactorConfirmation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

  @@unique([userId])
}

model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  imageSrc String
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue String
  userId String @db.ObjectId
  price Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId],references: [id],onDelete :Cascade)
}

model Order{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  amount Float
  currency String
  status String
  deliveryStatus String?
  createdDate DateTime @default(now())
  paymentIntentId String @unique
  products CartProductType[]
  address Address?

 user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

type CartProductType{
  id String
  name String
  description String
  category String
  brand String
  selectedImage String
  quantity Int
  price Float
  stockCount Int?
}

model Image {
  id          String   @id @default(uuid()) @map("_id") @db.ObjectId
  userId      String?
  url         String?
  title       String?
  description String?
  color String?
  colorCode String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt  DateTime @default(now())
}

type Address{
  city String
  country String
  line1 String
  line2 String?
  postal_code String
  state String
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// as we are using prisma n its does not worls on edge tht y session use on database edge
//so we dnt requires session as we just work with jwt